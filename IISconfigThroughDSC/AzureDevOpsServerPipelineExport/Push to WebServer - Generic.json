{"source":2,"revision":12,"description":null,"createdBy":{"displayName":"localuser","url":"http://testvm/DefaultCollection/_apis/Identities/493f5efd-02de-486d-8984-d15f9360497d","_links":{"avatar":{"href":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"}},"id":"493f5efd-02de-486d-8984-d15f9360497d","uniqueName":"testVM\\localuser","imageUrl":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA","descriptor":"win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"},"createdOn":"2020-03-03T23:03:12.973Z","modifiedBy":{"displayName":"localuser","url":"http://testvm/DefaultCollection/_apis/Identities/493f5efd-02de-486d-8984-d15f9360497d","_links":{"avatar":{"href":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"}},"id":"493f5efd-02de-486d-8984-d15f9360497d","uniqueName":"testVM\\localuser","imageUrl":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA","descriptor":"win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"},"modifiedOn":"2020-03-04T20:54:56.377Z","isDeleted":false,"variables":{"DeploySoftwareStorageAcctLocation":{"value":""},"DeploySoftwareStorageAcctSASToken":{"value":""},"DeployStagingSoftwareStorageAcctLocation":{"value":""},"DeployStagingSoftwareStorageAcctSASToken":{"value":""},"DeployStagingStorageAcctLocation":{"value":""},"DeployStagingStorageAcctSASToken":{"value":""},"DeployStorageAcctLocation":{"value":""},"DeployStorageAcctSASToken":{"value":""},"Location":{"value":"EastUS"},"ResourceGroup":{"value":""},"VMName":{"value":""}},"variableGroups":[],"environments":[{"id":3,"name":"Stage 1","rank":1,"owner":{"displayName":"localuser","url":"http://testvm/DefaultCollection/_apis/Identities/493f5efd-02de-486d-8984-d15f9360497d","_links":{"avatar":{"href":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"}},"id":"493f5efd-02de-486d-8984-d15f9360497d","uniqueName":"testVM\\localuser","imageUrl":"http://testvm/DefaultCollection/_apis/GraphProfile/MemberAvatars/win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA","descriptor":"win.Uy0xLTUtMjEtMjkxNjkyODA1Ny0yNzcxNTM4MzUtNDI0MDcwNzk0OC01MDA"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":7}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":8},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":9}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":1,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"3.*","name":"From storage account - DSC - Install WebDeploy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","ScriptType":"InlineScript","ScriptPath":"","Inline":"#Install DSC to VM\n#Note all variables with the syntax \"$()\" are DevOps variables that need to be predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n\n#The addition to this script is an additional parameter to pass in the location to install software\n#Create $InstallerURI parameter to source installation media. Note any blob prefixes should be added such as such as: \"/BlobPrefix/instal.exe\". This example uses a SAS token suffix\n$InstallerURI = \"$(DeploySoftwareStorageAcctLocation)\" + \"/WebDeploy_amd64_en-US.msi\" + \"$(DeploySoftwareStorageAcctSASToken)\"\n\n#Note all variables with the syntax \"$()\" are DevOps variables that need to predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n$DSCPath = \"$(DeployStorageAcctLocation)\" + \"/MSDeployInstall.zip\" + \"$(DeployStorageAcctSASToken)\"\n\n#Sets DSC location, configuration file and configuration\n$Settings = @{\n    \"ModulesUrl\" = \"$DSCPath\";\n    \"ConfigurationFunction\" = \"MSDeployInstall.ps1\\Install\"\n }\n\n$ProtectedSettings = @{\n     \"Properties\" = @{\"InstallerURI\" = $InstallerURI}\n}\n\n#Used Set-AzureRmVMExtension instead of Set-AzureRmVMDscExtension as Set-AzureRmVMDscExtension was requesting the older parameter -ConfigurationArchive\n#Installs DSC extension\n#Note DSC extension can be used multiple times if the same Name is used\nSet-AzureRmVMExtension -ExtensionName 'Microsoft.Powershell.DSC' -ResourceGroupName \"$(ResourceGroup)\" -VMName \"$(VMName)\" -Location \"$(Location)\" -ExtensionType 'DSC' -Publisher 'Microsoft.PowerShell' -TypeHandlerVersion '2.76' -Settings $Settings -ProtectedSettings $ProtectedSettings\n","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"3.*","name":"From storage account - DSC - Create Websites","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","ScriptType":"InlineScript","ScriptPath":"","Inline":"#Install DSC to VM\n#Note all variables with the syntax \"$()\" are DevOps variables that need to be predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n\n#The addition to this script is an additional parameter to pass in the location to install software\n#Create $InstallerURI parameter to source installation media. Note any blob prefixes should be added such as such as: \"/BlobPrefix/instal.exe\". This example uses a SAS token suffix\n$InstallerURI = \"$(DeploySoftwareStorageAcctLocation)\" + \"/ConfigureWebSitesThroughAzureExtension.cmd\" + \"$(DeploySoftwareStorageAcctSASToken)\"\n\n#Note all variables with the syntax \"$()\" are DevOps variables that need to predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n$DSCPath = \"$(DeployStorageAcctLocation)\" + \"/ConfigureWebSitesThroughAzureExtension.zip\" + \"$(DeployStorageAcctSASToken)\"\n\n#Sets DSC location, configuration file and configuration\n$Settings = @{\n    \"ModulesUrl\" = \"$DSCPath\";\n    \"ConfigurationFunction\" = \"ConfigureWebSitesThroughAzureExtension.ps1\\Install\";\n     #Added unused setting that's only purpose is to ensure a change in the .zip/.ps1 is re-cached on the client by changing the value in this setting when that occurs\n     \"advancedOptions\" = @{\"downloadMappings\" = \"1\"}\n }\n\n$ProtectedSettings = @{\n     \"Properties\" = @{\"InstallerURI\" = $InstallerURI}\n}\n\n#Used Set-AzureRmVMExtension instead of Set-AzureRmVMDscExtension as Set-AzureRmVMDscExtension was requesting the older parameter -ConfigurationArchive\n#Installs DSC extension\n#Note DSC extension can be used multiple times if the same Name is used\nSet-AzureRmVMExtension -ExtensionName 'Microsoft.Powershell.DSC' -ResourceGroupName \"$(ResourceGroup)\" -VMName \"$(VMName)\" -Location \"$(Location)\" -ExtensionType 'DSC' -Publisher 'Microsoft.PowerShell' -TypeHandlerVersion '2.76' -Settings $Settings -ProtectedSettings $ProtectedSettings\n","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":""}},{"environment":{},"taskId":"a433f589-fce1-4460-9ee6-44a624aeb1fb","version":"0.*","name":"Download Build Artifacts from Build Pipeline - Test Web Content","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"buildType":"specific","project":"e76c416d-38c6-4f6f-928e-179a2d012119","definition":"2","specificBuildWithTriggering":"false","buildVersionToDownload":"latest","allowPartiallySucceededBuilds":"false","branchName":"refs/heads/master","buildId":"","tags":"","downloadType":"specific","artifactName":"","itemPattern":"**","downloadPath":"$(System.ArtifactsDirectory)","parallelizationLimit":"8"}},{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Convert targeted .zip to standard name for future logic","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"ren \"$(System.ArtifactsDirectory)\\drop\\Contents\\packagev*.zip\" \"package.zip\"","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Convert targeted .cmd to standard name for future logic copy","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"ren \"$(System.ArtifactsDirectory)\\drop\\Contents\\*.cmd\" \"install.cmd\"","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"eb72cb01-a7e5-427b-a8a1-1b31ccac8a43","version":"2.*","name":"package.zip - Package Copy from artifact to storage account","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourcePath":"\"$(System.ArtifactsDirectory)\\drop\\Contents\\package.zip\"","ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","Destination":"AzureBlob","StorageAccount":"","StorageAccountRM":"","ContainerName":"","BlobPrefix":"testapp1drop","EnvironmentName":"","EnvironmentNameRM":"","ResourceFilteringMethod":"machineNames","MachineNames":"","vmsAdminUserName":"","vmsAdminPassword":"","TargetPath":"","AdditionalArgumentsForBlobCopy":"","AdditionalArgumentsForVMCopy":"","enableCopyPrerequisites":"false","CopyFilesInParallel":"true","CleanTargetBeforeCopy":"false","skipCACheck":"true","outputStorageUri":"","outputStorageContainerSasToken":""}},{"environment":{},"taskId":"eb72cb01-a7e5-427b-a8a1-1b31ccac8a43","version":"2.*","name":"install.cmd Package Copy from artifact to storage account","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourcePath":"\"$(System.ArtifactsDirectory)\\drop\\Contents\\install.cmd\"","ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","Destination":"AzureBlob","StorageAccount":"","StorageAccountRM":"","ContainerName":"","BlobPrefix":"testapp1drop","EnvironmentName":"","EnvironmentNameRM":"","ResourceFilteringMethod":"machineNames","MachineNames":"","vmsAdminUserName":"","vmsAdminPassword":"","TargetPath":"","AdditionalArgumentsForBlobCopy":"","AdditionalArgumentsForVMCopy":"","enableCopyPrerequisites":"false","CopyFilesInParallel":"true","CleanTargetBeforeCopy":"false","skipCACheck":"true","outputStorageUri":"","outputStorageContainerSasToken":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"3.*","name":"From storage account - DSC - CopyZippedWebsiteContentToVMthroughAzureExtension","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","ScriptType":"InlineScript","ScriptPath":"","Inline":"#Install DSC to VM\n#Note all variables with the syntax \"$()\" are DevOps variables that need to be predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n\n#The addition to this script is an additional parameter to pass in the location to install software\n#Create $InstallerURI parameter to source installation media. Note any blob prefixes should be added such as such as: \"/BlobPrefix/instal.exe\". This example uses a SAS token suffix\n$InstallerURI = \"$(DeployStagingSoftwareStorageAcctLocation)\" + \"/testapp1drop/package.zip\" + \"$(DeployStagingSoftwareStorageAcctSASToken)\"\n\n#Note all variables with the syntax \"$()\" are DevOps variables that need to predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n$DSCPath = \"$(DeployStagingStorageAcctLocation)\" + \"/CopyZippedWebsiteContentToVMthroughAzureExtension.zip\" + \"$(DeployStagingStorageAcctSASToken)\"\n\n#Sets DSC location, configuration file and configuration\n$Settings = @{\n    \"ModulesUrl\" = \"$DSCPath\";\n    \"ConfigurationFunction\" = \"CopyZippedWebsiteContentToVMthroughAzureExtension.ps1\\Install\"\n#Added unused setting that's only purpose is to ensure a change in the .zip/.ps1 is re-cached on the client by changing the value in this setting when that occurs\n     \"advancedOptions\" = @{\"downloadMappings\" = \"4\"}\n }\n\n$ProtectedSettings = @{\n     \"Properties\" = @{\"InstallerURI\" = $InstallerURI}\n}\n\n#Used Set-AzureRmVMExtension instead of Set-AzureRmVMDscExtension as Set-AzureRmVMDscExtension was requesting the older parameter -ConfigurationArchive\n#Installs DSC extension\n#Note DSC extension can be used multiple times if the same Name is used\nSet-AzureRmVMExtension -ExtensionName 'Microsoft.Powershell.DSC' -ResourceGroupName \"$(ResourceGroup)\" -VMName \"$(VMName)\" -Location \"$(Location)\" -ExtensionType 'DSC' -Publisher 'Microsoft.PowerShell' -TypeHandlerVersion '2.76' -Settings $Settings -ProtectedSettings $ProtectedSettings\n","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"3.*","name":"From storage account - DSC - SyncUnzippedWebsiteContentOnVMusingAzureExtension","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ConnectedServiceNameSelector":"ConnectedServiceNameARM","ConnectedServiceName":"","ConnectedServiceNameARM":"","ScriptType":"InlineScript","ScriptPath":"","Inline":"#Install DSC to VM\n#Note all variables with the syntax \"$()\" are DevOps variables that need to be predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n\n#The addition to this script is an additional parameter to pass in the location to install software\n#Create $InstallerURI parameter to source installation media. Note any blob prefixes should be added such as such as: \"/BlobPrefix/instal.exe\". This example uses a SAS token suffix\n$InstallerURI = \"$(DeployStagingSoftwareStorageAcctLocation)\" + \"/testapp1drop/install.cmd\" + \"$(DeployStagingSoftwareStorageAcctSASToken)\"\n\n#Note all variables with the syntax \"$()\" are DevOps variables that need to predefined\n#Sets DSC location existing on a private container on a storage accounts with a SAS token\n#Note that if the .zip file is not of the root of the container the blob prefix would be in the path such as: \"/BlobPrefix/test.zip\"\n$DSCPath = \"$(DeployStagingStorageAcctLocation)\" + \"/SyncUnzippedWebsiteContentOnVMusingAzureExtension.zip\" + \"$(DeployStagingStorageAcctSASToken)\"\n\n#Sets DSC location, configuration file and configuration\n$Settings = @{\n    \"ModulesUrl\" = \"$DSCPath\";\n    \"ConfigurationFunction\" = \"SyncUnzippedWebsiteContentOnVMusingAzureExtension.ps1\\Install\"\n#Added unused setting that's only purpose is to ensure a change in the .zip/.ps1 is re-cached on the client by changing the value in this setting when that occurs\n    \"advancedOptions\" = @{\"downloadMappings\" = \"2\"}\n }\n\n$ProtectedSettings = @{\n     \"Properties\" = @{\"InstallerURI\" = $InstallerURI}\n}\n\n#Used Set-AzureRmVMExtension instead of Set-AzureRmVMDscExtension as Set-AzureRmVMDscExtension was requesting the older parameter -ConfigurationArchive\n#Installs DSC extension\n#Note DSC extension can be used multiple times if the same Name is used\nSet-AzureRmVMExtension -ExtensionName 'Microsoft.Powershell.DSC' -ResourceGroupName \"$(ResourceGroup)\" -VMName \"$(VMName)\" -Location \"$(Location)\" -ExtensionType 'DSC' -Publisher 'Microsoft.PowerShell' -TypeHandlerVersion '2.76' -Settings $Settings -ProtectedSettings $ProtectedSettings","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":""}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":0,"url":"http://testvm/DefaultCollection/e76c416d-38c6-4f6f-928e-179a2d012119/_apis/Release/releases/0","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"http://testvm/DefaultCollection/_apis/public/Release/badge/e76c416d-38c6-4f6f-928e-179a2d012119/3/3"}],"artifacts":[],"triggers":[],"releaseNameFormat":"Release-$(rev:r)","tags":[],"pipelineProcess":{"type":1},"properties":{"DefinitionCreationSource":{"$type":"System.String","$value":"ReleaseClone"}},"id":3,"name":"Push to WebServer - Generic","path":"\\","projectReference":null,"url":"http://testvm/DefaultCollection/e76c416d-38c6-4f6f-928e-179a2d012119/_apis/Release/definitions/3","_links":{"self":{"href":"http://testvm/DefaultCollection/e76c416d-38c6-4f6f-928e-179a2d012119/_apis/Release/definitions/3"},"web":{"href":"http://testvm/DefaultCollection/e76c416d-38c6-4f6f-928e-179a2d012119/_release?definitionId=3"}}}